#!/usr/bin/env node

/**
 * Deployment Check Script
 * Verifies that all required configurations are in place for successful deployment
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Checking deployment configuration...\n');

// Check if required files exist
const requiredFiles = [
  '.github/workflows/deploy-pages.yml',
  '.github/workflows/deploy.yml',
  'vercel.json',
  'public/_redirects',
  'package.json'
];

console.log('üìÅ Checking required files:');
let allFilesExist = true;

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MISSING`);
    allFilesExist = false;
  }
});

// Check package.json scripts
console.log('\nüì¶ Checking package.json scripts:');
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const requiredScripts = ['build', 'type-check', 'lint', 'test:run'];

requiredScripts.forEach(script => {
  if (packageJson.scripts[script]) {
    console.log(`‚úÖ ${script}`);
  } else {
    console.log(`‚ùå ${script} - MISSING`);
    allFilesExist = false;
  }
});

// Check environment variables
console.log('\nüîê Environment variables check:');
const envExample = fs.readFileSync('env.example', 'utf8');
const requiredEnvVars = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];

requiredEnvVars.forEach(envVar => {
  if (envExample.includes(envVar)) {
    console.log(`‚úÖ ${envVar} - Documented`);
  } else {
    console.log(`‚ùå ${envVar} - NOT DOCUMENTED`);
    allFilesExist = false;
  }
});

// Check GitHub Actions workflow
console.log('\n‚öôÔ∏è GitHub Actions workflow check:');
const workflowContent = fs.readFileSync('.github/workflows/deploy-pages.yml', 'utf8');

if (workflowContent.includes('permissions:')) {
  console.log('‚úÖ Permissions configured');
} else {
  console.log('‚ùå Permissions not configured');
  allFilesExist = false;
}

if (workflowContent.includes('concurrency:')) {
  console.log('‚úÖ Concurrency control configured');
} else {
  console.log('‚ùå Concurrency control not configured');
  allFilesExist = false;
}

// Summary
console.log('\nüìä Deployment Check Summary:');
if (allFilesExist) {
  console.log('‚úÖ All checks passed! Your deployment should work.');
  console.log('\nüöÄ Next steps:');
  console.log('1. Add required secrets to GitHub repository:');
  console.log('   - VITE_SUPABASE_URL');
  console.log('   - VITE_SUPABASE_ANON_KEY');
  console.log('2. Enable GitHub Pages in repository settings');
  console.log('3. Push to main branch to trigger deployment');
} else {
  console.log('‚ùå Some checks failed. Please fix the issues above.');
  process.exit(1);
}

console.log('\nüìö For detailed instructions, see DEPLOYMENT_FIXES_FINAL.md');
