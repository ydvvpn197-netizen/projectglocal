# TheGlocal.in - Privacy-First Community Platform Cursor Rules

## Project Context
**Platform**: TheGlocal.in - Privacy-first digital public square for local communities
**Domain**: theglocal.in
**Tech Stack**: React 18 + TypeScript + Vite + TailwindCSS + shadcn/ui + Supabase + GitHub Pages
**Architecture**: Monorepo with consolidated components and privacy-first design

## Core Principles
- **Privacy by default**: Anonymous handles, identity reveal is opt-in
- **Community-first**: Local engagement, civic participation, transparent moderation
- **Production-ready**: TypeScript-first, comprehensive error handling, security-focused
- **Scalable**: Modular architecture, performance-optimized, database-efficient

## Development Guidelines

### 1. Privacy & Security First
```typescript
// ALWAYS implement privacy controls
interface PrivacySettings {
  anonymous_mode: boolean;
  profile_visibility: 'public' | 'friends' | 'private';
  location_sharing: boolean;
  analytics_enabled: boolean;
}

// Use RLS policies for all database operations
const { data } = await supabase
  .from('posts')
  .select('*')
  .eq('user_id', user.id); // Always filter by user_id for privacy
```

### 2. Component Architecture
```typescript
// Use consolidated components from src/components/
import { ConsolidatedSidebar } from '@/components/layout/ConsolidatedSidebar';
import { PrivacyFirstIdentitySystem } from '@/components/PrivacyFirstIdentitySystem';

// Follow the established pattern for new components
interface ComponentProps {
  className?: string;
  children?: React.ReactNode;
  onSettingsChange?: (settings: any) => void;
}
```

### 3. Database Schema Standards
```sql
-- Always include these fields in new tables
CREATE TABLE public.new_table (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable RLS on all tables
ALTER TABLE public.new_table ENABLE ROW LEVEL SECURITY;
```

### 4. Authentication & Anonymous Users
```typescript
// Support both authenticated and anonymous users
const { data: { user } } = await supabase.auth.getUser();
const isAnonymous = !user;

// Use anonymous identity service for anonymous users
import { anonymousIdentityService } from '@/services/anonymousIdentityService';
if (isAnonymous) {
  const session = await anonymousIdentityService.createAnonymousSession();
}
```

### 5. Location & Community Features
```typescript
// Always handle location data with privacy controls
interface LocationData {
  latitude?: number;
  longitude?: number;
  city?: string;
  state?: string;
  country?: string;
  precise_location: boolean; // User consent for precise location
}

// Use location filters for community content
const locationFilter = {
  city: userLocation.city,
  radius: 50 // km
};
```

### 6. Real-time Features with Supabase
```typescript
// Use Supabase subscriptions for real-time updates
const subscription = supabase
  .channel('posts')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'posts'
  }, (payload) => {
    // Handle real-time updates
  })
  .subscribe();
```

### 7. Error Handling & Loading States
```typescript
// Always implement comprehensive error handling
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);

try {
  setLoading(true);
  const result = await apiCall();
  return result;
} catch (error) {
  setError(error instanceof Error ? error.message : 'Unknown error');
  console.error('Operation failed:', error);
} finally {
  setLoading(false);
}
```

### 8. Performance Optimization
```typescript
// Use lazy loading for heavy components
const LazyComponent = lazy(() => import('./HeavyComponent'));

// Implement virtualization for large lists
import { VirtualizedUserList } from '@/components/VirtualizedUserList';

// Use React Query for data fetching
import { useQuery } from '@tanstack/react-query';
const { data, isLoading, error } = useQuery({
  queryKey: ['posts', filters],
  queryFn: () => fetchPosts(filters)
});
```

### 9. UI/UX Standards
```typescript
// Use shadcn/ui components consistently
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

// Follow responsive design patterns
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Content */}
</div>

// Use consistent spacing and typography
className="space-y-4 text-sm text-muted-foreground"
```

### 10. Testing & Quality
```typescript
// Write tests for privacy-critical features
describe('PrivacyControls', () => {
  it('should respect anonymous mode', () => {
    // Test anonymous user behavior
  });
  
  it('should enforce RLS policies', () => {
    // Test database security
  });
});
```

## File Organization
- `src/components/` - UI components (organized by feature)
- `src/services/` - Business logic and API calls
- `src/hooks/` - Custom React hooks
- `src/types/` - TypeScript type definitions
- `supabase/migrations/` - Database schema changes
- `supabase/functions/` - Edge functions for server-side logic

## Database Tables (Core)
- `profiles` - User profiles with privacy settings
- `posts` - Community posts, events, services
- `communities` - Local community groups
- `anonymous_sessions` - Anonymous user sessions
- `privacy_settings` - User privacy preferences
- `audit_logs` - Security and privacy audit trail

## Security Checklist
- [ ] RLS policies enabled on all tables
- [ ] User ID filtering in all queries
- [ ] Anonymous mode support
- [ ] Privacy settings respected
- [ ] Input validation and sanitization
- [ ] Error messages don't leak sensitive data
- [ ] Audit logging for sensitive operations

## Performance Checklist
- [ ] Lazy loading for heavy components
- [ ] Virtualization for large lists
- [ ] React Query for data fetching
- [ ] Proper loading states
- [ ] Bundle size optimization
- [ ] Image optimization
- [ ] Caching strategies

## Deployment
- Production builds: `npm run build:production`
- Deploy to GitHub Pages: `npm run deploy:git`
- Domain: theglocal.in
- Environment: Production-ready with proper error handling

## Code Style
- Use TypeScript strict mode
- Prefer functional components with hooks
- Use TailwindCSS for styling
- Follow existing naming conventions
- Comment complex privacy/security logic
- Use meaningful variable names

## When Adding Features
1. **Privacy Impact Assessment**: How does this affect user privacy?
2. **Anonymous Support**: Does this work for anonymous users?
3. **Location Relevance**: Is this feature location-aware?
4. **Community Value**: Does this enhance local community engagement?
5. **Security Review**: Are there any security implications?
6. **Performance Impact**: How does this affect load times?
7. **Mobile Responsive**: Does this work on mobile devices?

## Common Patterns
```typescript
// Privacy-aware data fetching
const fetchUserData = async (userId: string, isAnonymous: boolean) => {
  if (isAnonymous) {
    return await fetchAnonymousData();
  }
  return await fetchAuthenticatedData(userId);
};

// Location-aware content filtering
const filterByLocation = (content: any[], userLocation: LocationData) => {
  return content.filter(item => 
    isWithinRadius(item.location, userLocation, 50)
  );
};

// Real-time updates with privacy
const subscribeToUpdates = (channel: string, filters: any) => {
  return supabase
    .channel(channel)
    .on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'posts',
      filter: filters
    }, handleUpdate)
    .subscribe();
};
```

## Remember
- **Privacy is not optional** - Every feature must respect user privacy
- **Community comes first** - Features should enhance local engagement
- **Security is paramount** - RLS policies and input validation are mandatory
- **Performance matters** - Users expect fast, responsive experiences
- **Mobile-first** - Most users will access via mobile devices
- **Accessibility** - Ensure features work for all users
- **Transparency** - Users should understand what data is collected and why

## Quick Commands
- Start dev server: `npm run dev`
- Build production: `npm run build:production`
- Run tests: `npm run test:suite`
- Deploy: `npm run deploy:git`
- Database push: `npm run db:push`
- Type check: `npm run type-check`