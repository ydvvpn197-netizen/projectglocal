var f=Object.defineProperty;var p=(c,t,e)=>t in c?f(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var u=(c,t,e)=>p(c,typeof t!="symbol"?t+"":t,e);var d=(c,t,e)=>new Promise((n,r)=>{var a=o=>{try{_(e.next(o))}catch(g){r(g)}},i=o=>{try{_(e.throw(o))}catch(g){r(g)}},_=o=>o.done?n(o.value):Promise.resolve(o.value).then(a,i);_((e=e.apply(c,t)).next())});import{s as l}from"./chunk-CasIWBEQ.js";import"./chunk-C4jjqBrH.js";import"./chunk-BlluHz2J.js";import"./chunk-DJzzOJWe.js";import"./chunk-COTa-BBv.js";import"./chunk-DvlvDbdf.js";import"./chunk-BA32w1ww.js";const s=class s{static getInstance(){return s.instance||(s.instance=new s),s.instance}analyzeTrends(t="week"){return d(this,null,function*(){try{const e=new Date,n=this.getStartDate(t),{data:r,error:a}=yield l.from("community_trends").select("*").gte("time_period_start",n.toISOString()).lte("time_period_end",e.toISOString()).order("confidence_level",{ascending:!1}).limit(10);return a?(console.error("Error fetching trends data:",a),this.getDefaultTrends()):!r||r.length===0?this.getDefaultTrends():r.map(i=>({trend_type:i.trend_type,trend_name:i.trend_name,trend_description:i.trend_description,trend_score:i.trend_score,trend_direction:i.trend_direction,confidence_level:i.confidence_level}))}catch(e){return console.error("Error in analyzeTrends:",e),this.getDefaultTrends()}})}generatePredictions(t,e="short"){return d(this,null,function*(){try{const n=l.from("community_predictions").select("*").eq("prediction_type",t).eq("prediction_horizon",e).gte("prediction_date",new Date().toISOString()).order("confidence_score",{ascending:!1}).limit(5),{data:r,error:a}=yield n;return a?(console.error("Error fetching predictions data:",a),this.getDefaultPredictions(t,e)):!r||r.length===0?this.getDefaultPredictions(t,e):r.map(i=>({prediction_type:i.prediction_type,prediction_target:i.prediction_target,predicted_value:i.predicted_value,confidence_score:i.confidence_score,prediction_horizon:i.prediction_horizon,prediction_date:i.prediction_date}))}catch(n){return console.error("Error in generatePredictions:",n),this.getDefaultPredictions(t,e)}})}getAnalyticsData(){return d(this,arguments,function*(t=["total_posts","active_users","engagement_rate"],e="weekly"){try{const{data:n,error:r}=yield l.from("community_analytics").select("*").in("metric_name",t).eq("time_period",e).order("calculated_at",{ascending:!1}).limit(50);return r?(console.error("Error fetching analytics data:",r),[]):n||[]}catch(n){return console.error("Error in getAnalyticsData:",n),[]}})}getStartDate(t){const e=new Date;switch(t){case"day":e.setDate(e.getDate()-1);break;case"week":e.setDate(e.getDate()-7);break;case"month":e.setMonth(e.getMonth()-1);break}return e}getDefaultTrends(){return[{trend_type:"engagement",trend_name:"Community Engagement",trend_description:"Overall community participation levels",trend_score:.75,trend_direction:"rising",confidence_level:.88},{trend_type:"topic",trend_name:"Local Events",trend_description:"Interest in community events and gatherings",trend_score:.65,trend_direction:"rising",confidence_level:.82},{trend_type:"sentiment",trend_name:"Public Services",trend_description:"Community sentiment around public services",trend_score:-.15,trend_direction:"stable",confidence_level:.71}]}getDefaultPredictions(t,e){const n=new Date,r=e==="short"?7:e==="medium"?30:90;return n.setDate(n.getDate()+r),[{prediction_type:t,prediction_target:`${t}_growth`,predicted_value:1.25,confidence_score:.87,prediction_horizon:e,prediction_date:n.toISOString()},{prediction_type:t,prediction_target:`${t}_engagement`,predicted_value:.78,confidence_score:.82,prediction_horizon:e,prediction_date:n.toISOString()}]}calculateTrendMetrics(t){if(t.length<2)return{growth_rate:0,trend_direction:"stable",confidence:.5};const e=t[0].metric_value,n=t[t.length-1].metric_value,r=(e-n)/n;let a="stable";r>.05?a="rising":r<-.05&&(a="falling");const i=Math.min(.95,.5+Math.abs(r)*2);return{growth_rate:r,trend_direction:a,confidence:i}}healthCheck(){return d(this,null,function*(){try{const{error:t}=yield l.from("community_trends").select("id").limit(1),{error:e}=yield l.from("community_predictions").select("id").limit(1);return t||e?{healthy:!1,message:`Database error: ${(t==null?void 0:t.message)||(e==null?void 0:e.message)}`}:{healthy:!0,message:"Service is healthy"}}catch(t){return{healthy:!1,message:`Service error: ${t instanceof Error?t.message:"Unknown error"}`}}})}};u(s,"instance",null);let m=s;const I=m.getInstance();export{m as OptimizedTrendService,I as optimizedTrendService};
