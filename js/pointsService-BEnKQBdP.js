var n=(p,t,r)=>new Promise((e,a)=>{var o=d=>{try{s(r.next(d))}catch(u){a(u)}},c=d=>{try{s(r.throw(d))}catch(u){a(u)}},s=d=>d.done?e(d.value):Promise.resolve(d.value).then(o,c);s((r=r.apply(p,t)).next())});import{s as i}from"./main-jfCIwKxb.js";class l{static getUserPoints(t){return n(this,null,function*(){try{const{data:r,error:e}=yield i.from("user_points").select("*").eq("user_id",t).single();if(e)throw e;return r}catch(r){return console.error("Error fetching user points:",r),null}})}static addPoints(t,r,e,a,o){return n(this,null,function*(){try{const{data:c,error:s}=yield i.rpc("add_user_points",{p_user_id:t,p_points:r,p_transaction_type:e,p_description:a||"",p_metadata:o||null});if(s)throw s;return!0}catch(c){return console.error("Error adding points:",c),!1}})}static getCurrentUserPoints(){return n(this,null,function*(){try{const{data:{user:t}}=yield i.auth.getUser();if(!t)throw new Error("User not authenticated");return yield this.getUserPoints(t.id)}catch(t){return console.error("Error fetching current user points:",t),null}})}static getLeaderboard(t){return n(this,null,function*(){try{let r=i.from("community_leaderboard").select("*").order("rank",{ascending:!0});t!=null&&t.limit&&(r=r.limit(t.limit)),t!=null&&t.offset&&(r=r.range(t.offset,t.offset+(t.limit||100)-1)),t!=null&&t.min_points&&(r=r.gte("total_points",t.min_points));const{data:e,error:a}=yield r;return a?(console.error("Database error fetching leaderboard:",a),yield this.getLeaderboardFallback(t)):e||[]}catch(r){return console.error("Error fetching leaderboard:",r),yield this.getLeaderboardFallback(t)}})}static getLeaderboardFallback(t){return n(this,null,function*(){try{let r=i.from("user_points").select(`
          user_id,
          total_points,
          rank,
          profiles:user_id (
            display_name,
            avatar_url
          )
        `).order("total_points",{ascending:!1});t!=null&&t.limit&&(r=r.limit(t.limit)),t!=null&&t.offset&&(r=r.range(t.offset,t.offset+(t.limit||100)-1)),t!=null&&t.min_points&&(r=r.gte("total_points",t.min_points));const{data:e,error:a}=yield r;if(a)throw a;return(e||[]).map(o=>{var c,s;return{id:o.user_id,user_id:o.user_id,display_name:(c=o.profiles)==null?void 0:c.display_name,avatar_url:(s=o.profiles)==null?void 0:s.avatar_url,total_points:o.total_points,rank:o.rank,last_updated:new Date().toISOString()}})}catch(r){return console.error("Error fetching leaderboard fallback:",r),[]}})}static getTopUsers(t=5){return n(this,null,function*(){return yield this.getLeaderboard({limit:t})})}static getPointHistory(t,r){return n(this,null,function*(){try{let e=i.from("point_transactions").select("*").eq("user_id",t).order("created_at",{ascending:!1});r!=null&&r.transaction_type&&(e=e.eq("transaction_type",r.transaction_type)),r!=null&&r.date_from&&(e=e.gte("created_at",r.date_from)),r!=null&&r.date_to&&(e=e.lte("created_at",r.date_to)),r!=null&&r.limit&&(e=e.limit(r.limit)),r!=null&&r.offset&&(e=e.range(r.offset,r.offset+(r.limit||100)-1));const{data:a,error:o}=yield e;if(o)throw o;return a||[]}catch(e){return console.error("Error fetching point history:",e),[]}})}static getCurrentUserPointHistory(t){return n(this,null,function*(){try{const{data:{user:r}}=yield i.auth.getUser();if(!r)throw new Error("User not authenticated");return yield this.getPointHistory(r.id,t)}catch(r){return console.error("Error fetching current user point history:",r),[]}})}static addPointsWithReference(t,r,e,a,o,c){return n(this,null,function*(){try{const{data:s,error:d}=yield i.rpc("add_user_points",{p_user_id:t,p_points:r,p_transaction_type:e,p_reference_id:a,p_reference_type:o,p_description:c});if(d)throw d;return s}catch(s){return console.error("Error adding points:",s),!1}})}static handleEventAttendance(t,r){return n(this,null,function*(){try{const{data:e,error:a}=yield i.rpc("handle_event_points",{p_event_id:t,p_user_id:r,p_action:"attended"});if(a)throw a;return e}catch(e){return console.error("Error handling event attendance points:",e),!1}})}static handleEventOrganization(t,r){return n(this,null,function*(){try{const{data:e,error:a}=yield i.rpc("handle_event_points",{p_event_id:t,p_user_id:r,p_action:"organized"});if(a)throw a;return e}catch(e){return console.error("Error handling event organization points:",e),!1}})}static handlePollCreation(t,r){return n(this,null,function*(){try{const{data:e,error:a}=yield i.rpc("handle_poll_points",{p_poll_id:t,p_user_id:r,p_action:"created"});if(a)throw a;return e}catch(e){return console.error("Error handling poll creation points:",e),!1}})}static handlePostSharing(t,r){return n(this,null,function*(){try{const{data:e,error:a}=yield i.rpc("handle_share_points",{p_post_id:t,p_user_id:r});if(a)throw a;return e}catch(e){return console.error("Error handling post sharing points:",e),!1}})}static getCurrentUserPointsSummary(){return n(this,null,function*(){try{const{data:{user:t}}=yield i.auth.getUser();if(!t)throw new Error("User not authenticated");const[r,e]=yield Promise.all([this.getUserPoints(t.id),this.getPointHistory(t.id,{limit:10})]);if(!r)return null;const a={};return e.forEach(o=>{const c=o.transaction_type;a[c]=(a[c]||0)+o.points}),{totalPoints:r.total_points,rank:r.rank,recentTransactions:e,pointsBreakdown:a}}catch(t){return console.error("Error fetching points summary:",t),null}})}static getLeaderboardWithUserPosition(t,r=100){return n(this,null,function*(){try{const[e,a]=yield Promise.all([this.getLeaderboard({limit:r}),this.getUserPoints(t)]),o=(a==null?void 0:a.rank)||0,c=e.find(s=>s.user_id===t);return{leaderboard:e,userPosition:o,userEntry:c}}catch(e){return console.error("Error fetching leaderboard with user position:",e),{leaderboard:[],userPosition:0}}})}static refreshLeaderboardRanks(){return n(this,null,function*(){try{const{data:t,error:r}=yield i.rpc("refresh_all_leaderboard_ranks");if(r)throw r;return!0}catch(t){return console.error("Error refreshing leaderboard ranks:",t),!1}})}static getPointsStatistics(){return n(this,null,function*(){try{const[{count:t},{data:r},{data:e},{count:a}]=yield Promise.all([i.from("user_points").select("*",{count:"exact",head:!0}),i.from("user_points").select("total_points"),i.from("community_leaderboard").select("*").order("total_points",{ascending:!1}).limit(1).single(),i.from("point_transactions").select("*",{count:"exact",head:!0}).gte("created_at",new Date(Date.now()-864e5).toISOString())]),o=(r==null?void 0:r.reduce((s,d)=>s+d.total_points,0))||0,c=t?Math.round(o/t):0;return{totalUsers:t||0,totalPoints:o,averagePoints:c,topUser:e||null,recentActivity:a||0}}catch(t){return console.error("Error fetching points statistics:",t),{totalUsers:0,totalPoints:0,averagePoints:0,topUser:null,recentActivity:0}}})}}export{l as P};
