name: Build, Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean
      deploy_target:
        description: 'Deployment target'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - preview

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: read
  issues: write
  statuses: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUILD_DIR: 'dist'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # Job 1: Code Quality & Linting
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify package files
        run: |
          echo "üì¶ Checking package files..."
          if [ -f "package-lock.json" ]; then
            echo "‚úÖ package-lock.json found"
          else
            echo "‚ö†Ô∏è package-lock.json not found, will use npm install"
          fi
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json found"
          else
            echo "‚ùå package.json not found"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/*/package-lock.json
            packages/*/package-lock.json

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if cache issues
          npm ci --prefer-offline --no-audit --progress=false || npm install --no-audit --progress=false
          npm cache clean --force

      - name: Code Quality Check
        id: quality-check
        run: |
          echo "üîç Running code quality checks..."
          
          # Type checking
          echo "üìù Type checking..."
          npm run type-check
          
          # Linting
          echo "üßπ Linting..."
          npm run lint
          
          # Format checking
          echo "üé® Format checking..."
          npm run format:check
          
          echo "‚úÖ Quality checks passed"
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: |
            coverage/
            dist/
          retention-days: 7
          if-no-files-found: warn

  # Job 2: Testing
  test:
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15
    if: ${{ needs.quality.outputs.quality-passed == 'true' && inputs.skip_tests != true }}
    outputs:
      tests-passed: ${{ steps.test-run.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if cache issues
          npm ci --prefer-offline --no-audit --progress=false || npm install --no-audit --progress=false
          npm cache clean --force

      - name: Run Unit Tests
        id: test-run
        run: |
          echo "üß™ Running test suite..."
          npm run test:fast
          echo "‚úÖ All tests passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        env:
          CI: true
          NODE_OPTIONS: ${{ env.NODE_OPTIONS }}

      - name: Run E2E Tests (if available)
        if: success()
        run: |
          echo "üî¨ Running E2E tests..."
          npm run test:e2e || echo "‚ö†Ô∏è E2E tests not available or failed"
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7
          if-no-files-found: warn

  # Job 3: Build
  build:
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 20
    if: |
      always() && 
      needs.quality.outputs.quality-passed == 'true' && 
      (needs.test.outputs.tests-passed == 'true' || inputs.skip_tests == true)
    outputs:
      build-success: ${{ steps.build-app.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Try npm ci first, fallback to npm install if cache issues
          npm ci --prefer-offline --no-audit --progress=false || npm install --no-audit --progress=false
          npm cache clean --force

      - name: Build Application
        id: build-app
        run: |
          echo "üî® Building application..."
          
          # Set build environment
          export NODE_OPTIONS="${{ env.NODE_OPTIONS }}"
          export VITE_BUILD_TARGET="production"
          
          # Build with environment variables
          npm run build:prod
          
          # Verify build output
          if [ ! -d "${{ env.BUILD_DIR }}" ]; then
            echo "‚ùå Build directory not found"
            exit 1
          fi
          
          if [ ! -f "${{ env.BUILD_DIR }}/index.html" ]; then
            echo "‚ùå index.html not found in build output"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
          
          # Display build size
          echo "üìä Build size:"
          du -sh ${{ env.BUILD_DIR }}/*
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'placeholder_key' }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY || '' }}
          VITE_NEWS_API_KEY: ${{ secrets.VITE_NEWS_API_KEY || '' }}
          VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY || '' }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY || '' }}
          CI: true

      - name: Analyze Bundle (optional)
        if: success()
        run: |
          echo "üìä Bundle analysis..."
          npm run analyze:bundle || echo "‚ö†Ô∏è Bundle analyzer not available"
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
          retention-days: 30

  # Job 4: Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    timeout-minutes: 10
    if: |
      always() && 
      needs.quality.outputs.quality-passed == 'true' && 
      (needs.test.outputs.tests-passed == 'true' || inputs.skip_tests == true) &&
      needs.build.outputs.build-success == 'true' &&
      (github.ref == 'refs/heads/main' || inputs.deploy_target == 'production')
    environment: github-pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    timeout-minutes: 10
    if: |
      always() && 
      needs.quality.outputs.quality-passed == 'true' && 
      (needs.test.outputs.tests-passed == 'true' || inputs.skip_tests == true) &&
      needs.build.outputs.build-success == 'true' &&
      (github.ref == 'refs/heads/develop' || inputs.deploy_target == 'staging')
    environment: github-pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add staging deployment logic here
          echo "‚úÖ Staging deployment completed"

  # Job 6: Post-deployment verification
  verify:
    runs-on: ubuntu-latest
    needs: [deploy, deploy-staging]
    timeout-minutes: 5
    if: always() && (needs.deploy.result == 'success' || needs.deploy-staging.result == 'success')
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          SITE_URL="https://theglocal.in/"
          
          # Check if site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Site is accessible at $SITE_URL"
          else
            echo "‚ö†Ô∏è Site returned HTTP $HTTP_STATUS (DNS propagation may take time)"
          fi
          
          # Additional health checks
          echo "üè• Running health checks..."
          
          # Check if main assets are loading
          if curl -s -f "$SITE_URL" > /dev/null; then
            echo "‚úÖ Main page loads successfully"
          else
            echo "‚ùå Main page failed to load"
          fi

      - name: Performance check
        if: success()
        run: |
          echo "‚ö° Running performance check..."
          # Add lighthouse or other performance checks here
          echo "‚úÖ Performance check completed"

  # Job 7: Notification and cleanup
  notify:
    runs-on: ubuntu-latest
    needs: [quality, test, build, deploy, deploy-staging, verify]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Deploy Staging: ${{ needs.deploy-staging.result }}"
          echo "Verify: ${{ needs.verify.result }}"
          echo ""
          
          if [ "${{ needs.verify.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
            echo "üåê Live site: https://theglocal.in/"
          elif [ "${{ needs.build.result }}" = "success" ]; then
            echo "‚ö†Ô∏è Build successful but deployment may have issues"
          else
            echo "‚ùå Deployment failed"
          fi

      - name: Create deployment status
        if: always()
        run: |
          # Create a deployment status comment or issue
          echo "Creating deployment status..."
