name: Complete Deployment to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: read

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUILD_DIR: 'dist'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          # Clear npm cache to free up memory
          npm cache clean --force

      - name: Validate environment variables
        run: |
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "‚ö†Ô∏è Missing VITE_SUPABASE_URL secret - using default for build"
          else
            echo "‚úÖ VITE_SUPABASE_URL found"
          fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "‚ö†Ô∏è Missing VITE_SUPABASE_ANON_KEY secret - using default for build"
          else
            echo "‚úÖ VITE_SUPABASE_ANON_KEY found"
          fi
          echo "‚úÖ Environment validation complete"

      - run: npm run type-check
      - run: npm run lint

      - name: Run tests
        if: ${{ inputs.skip_tests != true }}
        run: npm run test:run
        env:
          CI: true

      - name: Test Supabase connection
        timeout-minutes: 3
        run: npm run test:supabase
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'placeholder_key' }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20
    environment: github-pages
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: Install dependencies with memory optimization
        run: |
          # Set Node.js memory limit
          export NODE_OPTIONS="--max-old-space-size=4096"
          npm ci --prefer-offline --no-audit --progress=false
          # Clear npm cache to free up memory
          npm cache clean --force
      - name: Build project with memory optimization
        run: |
          echo "üî® Starting build process..."
          # Set memory limits and optimize build
          export NODE_OPTIONS="--max-old-space-size=6144 --max-semi-space-size=512"
          export VITE_BUILD_TARGET="production"
          # Run build with memory monitoring
          npm run build
          echo "‚úÖ Build completed successfully"
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'placeholder_key' }}
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY || '' }}
          VITE_NEWS_API_KEY: ${{ secrets.VITE_NEWS_API_KEY || '' }}
          VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY || '' }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY || '' }}
          CI: true
      - name: Validate build output
        run: |
          if [ ! -d "${{ env.BUILD_DIR }}" ]; then echo "‚ùå Build dir not found"; exit 1; fi
          if [ ! -f "${{ env.BUILD_DIR }}/index.html" ]; then echo "‚ùå index.html missing"; exit 1; fi
          echo "‚úÖ Build output validated"
          ls -la ${{ env.BUILD_DIR }}
      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_DIR }}
      - id: deployment
        uses: actions/deploy-pages@v4

  verify:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    timeout-minutes: 5
    if: always()
    steps:
      - run: sleep 30
      - run: |
          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed: https://theglocal.in/"
          else
            echo "‚ùå Deployment failed"; exit 1;
          fi
      - run: |
          SITE_URL="https://theglocal.in/"
          if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è Site may not be fully deployed yet (DNS propagation may take time)"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [validate, build-and-deploy, verify]
    if: always()
    steps:
      - run: |
          echo "üìä Deployment Summary"
          echo "Validate: ${{ needs.validate.result }}"
          echo "Build & Deploy: ${{ needs.build-and-deploy.result }}"
          echo "Verify: ${{ needs.verify.result }}"
