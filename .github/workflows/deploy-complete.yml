name: Complete Deployment to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: 'false'
        type: boolean

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: read

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  BUILD_DIR: 'dist'

jobs:
  # Job 1: Validate and Test
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate environment variables
      run: |
        echo "üîç Checking GitHub Secrets..."
        if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
          echo "‚ùå VITE_SUPABASE_URL secret is not set"
          echo "Please add VITE_SUPABASE_URL to your repository secrets"
          exit 1
        fi
        if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
          echo "‚ùå VITE_SUPABASE_ANON_KEY secret is not set"
          echo "Please add VITE_SUPABASE_ANON_KEY to your repository secrets"
          exit 1
        fi
        echo "‚úÖ Environment variables validated successfully"
        echo "üìã Supabase URL: ${{ secrets.VITE_SUPABASE_URL }}"
        echo "üîë Anon Key: ${VITE_SUPABASE_ANON_KEY:0:20}..."
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      if: ${{ !inputs.skip_tests }}
      run: npm run test:run
      env:
        CI: true
    
    - name: Test Supabase connection
      run: npm run test:supabase
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  # Job 2: Build and Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: validate
    environment: github-pages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        VITE_NEWS_API_KEY: ${{ secrets.VITE_NEWS_API_KEY }}
        VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}
        VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
        CI: true
    
    - name: Validate build output
      run: |
        echo "üîç Validating build output..."
        if [ ! -d "${{ env.BUILD_DIR }}" ]; then
          echo "‚ùå Build directory not found"
          exit 1
        fi
        if [ ! -f "${{ env.BUILD_DIR }}/index.html" ]; then
          echo "‚ùå index.html not found in build output"
          exit 1
        fi
        echo "‚úÖ Build output validated successfully"
        ls -la ${{ env.BUILD_DIR }}
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './${{ env.BUILD_DIR }}'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 3: Post-deployment verification
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Wait for deployment
      run: sleep 30
    
    - name: Check deployment status
      run: |
        echo "üîç Checking deployment status..."
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment completed successfully"
          echo "üåê Your site should be available at:"
          echo "   https://ydvvpn197-netizen.github.io/projectglocal/"
        else
          echo "‚ùå Deployment failed"
          echo "Check the Actions tab for more details"
          exit 1
        fi
    
    - name: Test deployed site
      run: |
        echo "üß™ Testing deployed site..."
        SITE_URL="https://ydvvpn197-netizen.github.io/projectglocal/"
        
        # Test if site is accessible
        if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
          echo "‚úÖ Site is accessible"
        else
          echo "‚ö†Ô∏è Site may not be fully deployed yet"
        fi

  # Job 4: Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [validate, build-and-deploy, verify]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Validate: ${{ needs.validate.result }}"
        echo "Build & Deploy: ${{ needs.build-and-deploy.result }}"
        echo "Verify: ${{ needs.verify.result }}"
        echo ""
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "üåê Site URL: https://ydvvpn197-netizen.github.io/projectglocal/"
          echo ""
          echo "Next steps:"
          echo "1. Test all features on the deployed site"
          echo "2. Check browser console for any errors"
          echo "3. Verify all integrations are working"
        else
          echo "‚ùå Deployment failed"
          echo "Check the Actions tab for error details"
        fi
